package some.domain.scenarios;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import some.domain.common.BaseOperations;
import some.domain.utils.Helper;
import some.domain.utils.TraceOps;
import some.domain.utils.TraceOps.LogLevel;

public class Scenario1 extends BaseOperations{

	String testName;
	WebDriverWait wait;
	
	public Scenario1() throws IOException {
		super();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		wait = new WebDriverWait(driver, 10);
	}

    @BeforeMethod
    public void BeforeMethod(Method method)
    {
        testName = method.getName(); 
        TraceOps.printMessage(LogLevel.INFO, "Executing test: %s...", testName);
    }
    
    @AfterMethod
    public void AfterMethod()
    {
        TraceOps.printMessage(LogLevel.INFO, "Finished test execution: %s", testName);
    }
	
	
	@Test(priority =0) 
	@Parameters({"wego_home"})
	public void openHomePage(String url) throws InterruptedException{

		driver.get(url);
	}

	@Test(dependsOnMethods = {"openHomePage"}, enabled = true)
	public void navigateToDirections(){
		
		By xpathDirectionBtn = By.xpath("//*[@id='searchbar']/div/div/a") ;
		
		driver.findElement(xpathDirectionBtn).click();
		
	}
	
	@Test (dependsOnMethods = {"navigateToDirections"},dataProvider="Directions", enabled = true)
	public void setFrom(String from, String to, final String xpathFrom, 
						String xpathTo){

		WebElement element;
		By idFrom = By.id("itinerary_item_input_0");
		By cssSelectSuggestion = By.cssSelector("div[class='dropdown_list_item suggestion']");

		TraceOps.printMessage(LogLevel.TRACE, "Entering %s as starting location...", from);
		element= driver.findElement(idFrom);
		element.clear();
		element.sendKeys(from);
//		element.clear();
//		element.sendKeys(from);
		
//		try {
//			Thread.sleep(2000);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		
		wait.until(ExpectedConditions.elementToBeClickable(cssSelectSuggestion));
		
		//waitForElement(By.xpath(xpathFrom), 10, 1, true);
		//waitForElement(cssSelectSuggestion, 10, 1, false);
		
		List <WebElement> elems = driver.findElements(cssSelectSuggestion);
		
		//getWebElementListSize(cssSelectSuggestion);
		
		for (WebElement e:elems)
			System.out.println(e.getText());
		
		WebElement elem = getElementFromListByText(cssSelectSuggestion, "Harju Maakond");
		
		System.out.println(elem.getText());
		
		//driver.findElement(By.xpath(xpathFrom)).click();

	}
	
	@Test (dependsOnMethods = {"setFrom"},dataProvider = "Directions", enabled = false)
	public void setTo (String from, String to, final String xpathFrom, String xpathTo){
		
		WebElement element;
		By idTo = By.id("itinerary_item_input_1");
		
		TraceOps.printMessage(LogLevel.TRACE, "Entering %s as destination...", to);
		element = driver.findElement(idTo);
		element.clear();
		element.sendKeys(to);
		waitForElement(By.xpath(xpathTo), 10, 1, false);
		driver.findElement(By.xpath(xpathTo)).click();
		
	}

	@Test (dependsOnMethods = {"setTo"},dataProvider = "TravelTimeOptions",enabled = false)
	public void verifyTravelTimeVisible(String from, String to, String byCar, String byBus,String byBike){
		
		int routeOptions = Helper.calculateNonEmptyArgs(byCar,byBus,byBike);
	
		String xpathTravelOption = "//*[@id='routes_list']/ul/li";
		String xpathMaxTravelOption = xpathTravelOption+"["+routeOptions+"]";
		
		TraceOps.printMessage(LogLevel.TRACE, "Verifying travel time options for the route %s - %s.", from,to);
		waitForElement(By.xpath(xpathMaxTravelOption),10,1,true);
		List <WebElement> elems = driver.findElements(By.xpath(xpathTravelOption));
		
		Assert.assertEquals(routeOptions, elems.size());
	
	}

	@Test (dependsOnMethods = {"verifyTravelTimeVisible"},dataProvider = "TravelTimeByCar",enabled = false)
	public void verifyTravelTimebyCar_calculated(String from, String to, String travelTime){
		
		By xpathBtn = By.xpath("/html/body/div[1]/div[6]/div/div/div[2]/div/button[1]");
		By xpathTravelTime = By.xpath("//*[@id='routes_list']/ul/li[1]/div/div[2]/div[1]/span");
		String[] travelTimeArray = travelTime.split(",");
		boolean isMatch = false;
		
		TraceOps.printMessage(LogLevel.TRACE, "Verifying car travel time for the route %s - %s.", from,to);
		
		driver.findElement(xpathBtn).click();
		
		List<WebElement> elems = driver.findElements(xpathTravelTime);

		isMatch = Helper.isMatchingElement(elems, travelTimeArray);
		
//		String result ="";
//		for(WebElement e:elems){
//			
//			String str = e.getText();
//			result = result+str;
//		}
//		
//		for (int i =0; i<travelTimeArray.length;i++){
//			if (result.contains(travelTimeArray[i])){
//				isMatch=true;
//				break;
//			}
//		}
		
		Assert.assertTrue(isMatch,"Calculated travel time does not match expected values.");
	}
	
	@Test (dependsOnMethods = {"verifyTravelTimeVisible"},dataProvider = "TravelTimeByBus",enabled = false)
	public void verifyTravelTimebyBus_calculated(String from, String to, String travelTime){

		String[] travelTimeArray = travelTime.split(",");
		By xpathBtn =By.xpath("/html/body/div[1]/div[6]/div/div/div[2]/div/button[1]");
		By xpathTravelTime = By.xpath("//*[@id='routes_list']/ul/li[2]/div/div[2]/div[1]/span");
		boolean isMatch = false;
		
		TraceOps.printMessage(LogLevel.TRACE, "Verifying bus travel time for the route %s - %s.", from,to);
		
		driver.findElement(xpathBtn).click();
		
		List<WebElement> elems = driver.findElements(xpathTravelTime);
		
		isMatch = Helper.isMatchingElement(elems, travelTimeArray);
		
//		String result ="";
//		for(WebElement e:elems){
//			
//			String str = e.getText();
//			result = result+str;
//		}
//		
//		for (int i =0; i<travelTimeArray.length;i++){
//			if (result.contains(travelTimeArray[i])){
//				isMatch=true;
//				break;
//			}
//		}
		
		Assert.assertTrue(isMatch,"Calculated travel time does not match expected values.");

	}
	
	@Test (dependsOnMethods = {"verifyTravelTimeVisible"},dataProvider = "TravelTimeByBike",enabled = false)
	public void verifyTravelTimebyBike_calculated(String from, String to, String travelTime ){

		String[] travelTimeArray = travelTime.split(",");
		By xpathBtn = By.xpath("/html/body/div[1]/div[6]/div/div/div[2]/div/button[1]");
		By xpathTravelTime = By.xpath("//*[@id='routes_list']/ul/li[3]/div/div[2]/div[1]/span");
		boolean isMatch = false;
		
		TraceOps.printMessage(LogLevel.TRACE, "Verifying bike travel time for the route %s - %s.", from,to);
		
		driver.findElement(xpathBtn).click();
		List<WebElement> elems = driver.findElements(xpathTravelTime);
		
		isMatch = Helper.isMatchingElement(elems, travelTimeArray);
		
//		String result ="";
//		for(WebElement e:elems){
//			
//			String str = e.getText();
//			result = result+str;
//		}
//		
//		for (int i =0; i<travelTimeArray.length;i++){
//			if (result.contains(travelTimeArray[i])){
//				isMatch=true;
//				break;
//			}
//		}
		
		Assert.assertTrue(isMatch,"Calculated travel time does not match expected values.");
	}
	
	@Test (dependsOnMethods = {"verifyTravelTimeVisible"},dataProvider = "TravelTimeOnFoot",enabled = false)
	public void verifyTravelTimeonFoot_calculated(String from, String to, String travelTime ){
		
		By xpathBtn = By.xpath("/html/body/div[1]/div[6]/div/div/div[2]/div/button[5]");
		By xpathTravelTime = By.xpath("//*[@id='routes_list']/ul/li[1]/div/div[2]/div[1]");
		boolean isMatch = false;
		String[] travelTimeArray = travelTime.split(",");
		
		
		TraceOps.printMessage(LogLevel.TRACE, "Verifying on foot travel time for the route %s - %s.", from,to);
		
		driver.findElement(xpathBtn).click();
		
		waitForElement(xpathTravelTime, 10, 1, false);
		List<WebElement> elems = driver.findElements(xpathTravelTime);
		
		isMatch = Helper.isMatchingElement(elems, travelTimeArray);
		
//		//getting all text data from xpathTravelTime element
//		String result ="";
//		for(WebElement e:elems){
//			
//			String str = e.getText();
//			result = result+str;
//		}
//		//Asserting data from xpathTravelTime with pattern defined in data provider.
//		for (int i =0; i<travelTimeArray.length;i++){
//			if (result.contains(travelTimeArray[i])){
//				isMatch=true;
//				break;
//			}
//		}
		
		Assert.assertTrue(isMatch,"Calculated travel time does not match expected values.");
	}
	
	@DataProvider(name="Directions")
    public Object[][] getDirectionData(){

        return new Object[][] {
    		//From, 		To, 	xpathFrom,		xpathTo 
            { "Tallinn",	"Narva",
            						"//*[@id='itinerary_item_0']/div[2]/div[1]/span[1]/div",
            										"//*[@id='itinerary_item_1']/div[2]/div[2]/span[1]/span/span"}
        };
	}
 	@DataProvider(name="TravelTimeOptions")
    public Object[][] getTravelTimeOptions(){

        return new Object[][] {
    		//From, 		To,		byCar,	byBus, 	byBike
            { "Tallinn",	"Narva","+",	"+",	"+"	}
        };
	}
	@DataProvider(name="TravelTimeByCar")
    public Object[][] getTravelTime_ByCar(){

        return new Object[][] {
    		//From, 		To,		Travel time in hours
            {"Tallinn",		"Narva","1 h,2 h,3 h"}
        };
	}
	@DataProvider(name="TravelTimeByBus")
    public Object[][] getTravelTime_ByBus(){

        return new Object[][] {
    		//From, 		To,		Travel time in hours
            {"Tallinn",		"Narva","2 h,3 h,4 h"}
        };
	}
	@DataProvider(name="TravelTimeByBike")
    public Object[][] getTravelTime_ByBike(){

        return new Object[][] {
    		//From, 		To,		Travel time in hours
            {"Tallinn",		"Narva","15 h,16 h,17 h"}
        };
	}
	@DataProvider(name="TravelTimeOnFoot")
    public Object[][] getTravelTime_onFoot(){

        return new Object[][] {
    		//From, 		To,		Travel time in hours
            {"Tallinn",		"Narva","1 d,2 d"}
        };
	}
	
	
}
